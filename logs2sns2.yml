---
AWSTemplateFormatVersion: 2010-09-09
Description: Notify EMail by Lambda function for CloudWatch Logs Event (2way)
Parameters:
  ErrorFilterPattern:
    Type: String
    Description: Filter pattern to ERROR notify(RegEx).
    Default: /ERROR/
  ErrorFilterPatternExcluded:
    Type: String
    Description: Exclude filter pattern to ERROR notify(RegEx).
    Default: /$^/
  ErrorMailSubject:
    Type: String
    Description: Subject of ERROR notify mail
    Default: "[Error] Notify From CloudWatch Logs"
  ErrorNotifyTopicName:
    Type: String
    Description: SNS topic name for ERROR notify CloudWatch Logs
    Default: CloudWatchLogsErrorNotifyTopic
  WarningFilterPattern:
    Type: String
    Description: Filter pattern to WARNING notify(RegEx).
    Default: /WARN/
  WarningFilterPatternExcluded:
    Type: String
    Description: Exclude filter pattern to WARNING notify(RegEx).
    Default: /$^/
  WarningMailSubject:
    Type: String
    Description: Subject of WARNING notify mail
    Default: "[Warning] Notify From CloudWatch Logs"
  WarningNotifyTopicName:
    Type: String
    Description: SNS topic name for WARNING notify CloudWatch Logs
    Default: CloudWatchLogsWarningNotifyTopic
Resources:
  SNSTopicError:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Ref ErrorNotifyTopicName
      DisplayName: Notify CloudWatch logs event (Error).
  SNSTopicWarning:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Ref WarningNotifyTopicName
      DisplayName: Notify CloudWatch logs event (Warning).
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: Basic
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - PolicyName: PublishSNS
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - !Ref SNSTopicError
                  - !Ref SNSTopicWarning
  PublishToSNSWhenCloudWatchLogsEvent:
    Type: AWS::Lambda::Function
    Properties:
      Description: Notify to SNS by CloudWatch Logs Event
      Role: !GetAtt LambdaRole.Arn
      Runtime: nodejs6.10
      MemorySize: 128
      Timeout: 3
      Handler: index.handler
      Code:
        ZipFile: !Sub |
          var zlib = require('zlib');
          var aws = require('aws-sdk');
          var sns = new aws.SNS({ region: 'ap-northeast-1' });
          exports.handler = function(input, context, callback) {
            var data = new Buffer(input.awslogs.data, 'base64');
            zlib.gunzip(data, function(e, result) {
              if (e) {
                callback(e);
              } else {
                result = JSON.parse(result.toString('utf-8'));
                var errorLogs = result['logEvents']
                                     .filter(function(evt) { return evt['message'].match(${ErrorFilterPattern}) ;})
                                     .filter(function(evt) { return !evt['message'].match(${ErrorFilterPatternExcluded}) ;})
                                     .map(function(evt) { return evt['message'] });
                console.log('processing[Error]' + errorLogs.length + '/' + result['logEvents'].length + ' events.');
                var warnLogs = result['logEvents']
                                     .filter(function(evt) { return evt['message'].match(${WarningFilterPattern}) ;})
                                     .filter(function(evt) { return !evt['message'].match(${WarningFilterPatternExcluded}) ;})
                                     .map(function(evt) { return evt['message'] });
                console.log('processing[Warning]' + warnLogs.length + '/' + result['logEvents'].length + ' events.');
                if (errorLogs.length === 0 && warnLogs.length === 0) {
                  callback();
                  return;
                }
                if (0 < errorLogs.length) {
                  // has error log
                  var subject = '${ErrorMailSubject}';
                  var payload = { default: '' };
                  payload['default'] += 'NotifyAt: ' + new Date() + '\n';
                  payload['default'] += 'Log: ' + result['logGroup'] + ' - ' + result['logStream'] + '\n';
                  payload['default'] += 'Filter: ' + result['subscriptionFilters'] + '\n';
                  payload['default'] += 'Messages:\n';
                  payload['default'] += errorLogs.join('\n---\n');
                  sns.publish({
                    Subject: subject,
                    Message: JSON.stringify(payload),
                    MessageStructure: 'json',
                    TargetArn: '${SNSTopicError}'
                  }, function(err, data) {
                    if (err) {
                      callback(err);
                    } else if (0 < warnLogs.length) {
                      // has waring too
                      var subject = '${WarningMailSubject}';
                      var payload = { default: '' };
                      payload['default'] += 'NotifyAt: ' + new Date() + '\n';
                      payload['default'] += 'Log: ' + result['logGroup'] + ' - ' + result['logStream'] + '\n';
                      payload['default'] += 'Filter: ' + result['subscriptionFilters'] + '\n';
                      payload['default'] += 'Messages:\n';
                      payload['default'] += warnLogs.join('\n---\n');
                      sns.publish({
                        Subject: subject,
                        Message: JSON.stringify(payload),
                        MessageStructure: 'json',
                        TargetArn: '${SNSTopicWarning}'
                      }, function(err, data) {
                        if (err) callback(err);
                        else callback(null, data);
                      });
                    } else {
                      callback(null, data);
                    }
                  });
                } else {
                  // has NOT error log == warning only
                  var subject = '${WarningMailSubject}';
                  var payload = { default: '' };
                  payload['default'] += 'NotifyAt: ' + new Date() + '\n';
                  payload['default'] += 'Log: ' + result['logGroup'] + ' - ' + result['logStream'] + '\n';
                  payload['default'] += 'Filter: ' + result['subscriptionFilters'] + '\n';
                  payload['default'] += 'Messages:\n';
                  payload['default'] += warnLogs.join('\n---\n');
                  sns.publish({
                    Subject: subject,
                    Message: JSON.stringify(payload),
                    MessageStructure: 'json',
                    TargetArn: '${SNSTopicWarning}'
                  }, function(err, data) {
                    if (err) callback(err);
                    else callback(null, data);
                  });
                }
              }
            });
          };
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PublishToSNSWhenCloudWatchLogsEvent.Arn
      Action: lambda:InvokeFunction
      Principal: logs.ap-northeast-1.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub arn:aws:logs:ap-northeast-1:${AWS::AccountId}:*
Outputs:
  LambdaFunction:
    Description: arn about lambda function
    Value: !GetAtt PublishToSNSWhenCloudWatchLogsEvent.Arn
