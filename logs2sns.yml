---
AWSTemplateFormatVersion: 2010-09-09
Description: Notify EMail by Lambda function for CloudWatch Logs Event
Parameters:
  FilterPattern:
    Type: String
    Description: Filter pattern to notify(RegEx).
    Default: /ERROR/
  FilterPatternExcluded:
    Type: String
    Description: Exclude filter pattern to notify(RegEx).
    Default: /$^/
  MailSubject:
    Type: String
    Description: Subject of notify mail
    Default: Notify From CloudWatch Logs
  NotifyTopicName:
    Type: String
    Description: SNS topic name for notify CloudWatch Logs
    Default: CloudWatchLogsNotifyTopic
  LogGroupName:
    Type: String
    Description: Enter CloudWatch Logs log group name.
    Default: ""
  FilterPatternForSubScription:
    Type: String
    Description: Filter pattern for CloudWatch Logs subscription.
    Default: ""
Resources:
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Ref NotifyTopicName
      DisplayName: Notify CloudWatch logs event.
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: Basic
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - PolicyName: PublishSNS
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref SNSTopic
  PublishToSNSWhenCloudWatchLogsEvent:
    Type: AWS::Lambda::Function
    Properties:
      Description: Notify to SNS by CloudWatch Logs Event
      Role: !GetAtt LambdaRole.Arn
      Runtime: nodejs6.10
      MemorySize: 128
      Timeout: 3
      Handler: index.handler
      Code:
        ZipFile: !Sub |
          var zlib = require('zlib');
          var aws = require('aws-sdk');
          var sns = new aws.SNS({ region: 'ap-northeast-1' });
          exports.handler = function(input, context, callback) {
            var data = new Buffer(input.awslogs.data, 'base64');
            zlib.gunzip(data, function(e, result) {
              if (e) {
                callback(e);
              } else {
                result = JSON.parse(result.toString('utf-8'));
                var logs = result['logEvents']
                               .filter(function(evt) { return evt['message'].match(${FilterPattern}) ;})
                               .filter(function(evt) { return !evt['message'].match(${FilterPatternExcluded}) ;})
                               .map(function(evt) { return evt['message'] });
                console.log('processing' + logs.length + '/' + result['logEvents'].length + ' events.');
                if (logs.length === 0) {
                  callback();
                  return;
                }
                var subject = '${MailSubject}';
                var payload = { default: '' };
                payload['default'] += 'NotifyAt: ' + new Date() + '\n';
                payload['default'] += 'Log: ' + result['logGroup'] + ' - ' + result['logStream'] + '\n';
                payload['default'] += 'Filter: ' + result['subscriptionFilters'] + '\n';
                payload['default'] += 'Messages:\n';
                payload['default'] += logs.join('\n---\n');
                sns.publish({
                  Subject: subject,
                  Message: JSON.stringify(payload),
                  MessageStructure: 'json',
                  TargetArn: '${SNSTopic}'
                }, function(err, data) {
                  if (err) callback(err);
                  else callback(null, data);
                });
              }
            });
          };
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PublishToSNSWhenCloudWatchLogsEvent.Arn
      Action: lambda:InvokeFunction
      Principal: logs.ap-northeast-1.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub arn:aws:logs:ap-northeast-1:${AWS::AccountId}:*
  SubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !GetAtt PublishToSNSWhenCloudWatchLogsEvent.Arn
      FilterPattern: !Ref FilterPatternForSubScription
      LogGroupName: !Ref LogGroupName
Outputs:
  LambdaFunction:
    Description: arn about lambda function
    Value: !GetAtt PublishToSNSWhenCloudWatchLogsEvent.Arn
